using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.ARFoundation;

public class SpawnableManager : MonoBehaviour
{
    [SerializeField]
    ARRaycastManager m_RaycastManager;
    List<ARRaycastHit> m_Hits = new List<ARRaycastHit>();
    [SerializeField]
    GameObject spawnablePrefab;

    Camera arCam;
    GameObject spawnedObject;
    bool objectIsSpawned = false;

    public Touch touch0;
    public Touch touch1;

    private float distance;

    private float newDistance0;
    private float newDistance1;

    private float newDistance;

    public Vector3 scaleChange;

    public float scaleValue;

    private Vector2 midpoint;

    private bool firstRun;



    // Start is called before the first frame update
    void Start()
    {
        // Set spawnedObject to null and find the AR Camera
        spawnedObject = null;
        arCam = GameObject.Find("AR Camera").GetComponent<Camera>();
    }

    // Update is called once per frame
    void Update()
    {
        // Not sure if needed
        if (Input.touchCount == 0)
            return;

        // Create raycast hit and ray objects
        // Not sure what this is but it's needed
        RaycastHit hit;
        Ray ray = arCam.ScreenPointToRay(Input.GetTouch(0).position);

        // Assuming this means if any touch is detected
        if (m_RaycastManager.Raycast(Input.GetTouch(0).position, m_Hits))
        {

            // Conditions for pressing screen with 2 fingers
            // Currently the object disappears when 2 fingers touch it
            if (Input.touchCount == 2 && objectIsSpawned)
            {
                touch0 = Input.GetTouch(0);
                touch1 = Input.GetTouch(1);

                //if (Input.GetTouch(0).phase == TouchPhase.Began)
                if (touch0.phase == TouchPhase.Began && touch1.phase == TouchPhase.Began)
                {
                    midpoint = (touch0.position + touch1.position) / 2;
                    distance = Vector2.Distance(midpoint, (touch0.position + touch1.position) / 2);
                    firstRun = false;
                }

                if (touch0.phase == TouchPhase.Moved && touch1.phase == TouchPhase.Moved)
                {
                    if (firstRun)
                    {
                        distance = newDistance;
                    }
                    firstRun = true;

                    midpoint = (touch0.position + touch1.position) / 2;
                    newDistance0 = Vector2.Distance(midpoint, touch0.position);
                    newDistance1 = Vector2.Distance(midpoint, touch1.position);
                    newDistance = (newDistance0 + newDistance1) / 2;
                }
                // trying different things here
                scaleValue = ((newDistance - distance)/100);
                scaleChange = new Vector3(-0.1f, -0.1f, -0.1f);
                //scaleValue = (scaleSpeed * (newDistance - distance));
                //if ((gameObject.transform.localScale.x > 10 && scaleValue < 0) || (gameObject.transform.localScale.x < 0.1f && scaleValue > 0) || (gameObject.transform.localScale.x < 10000 && gameObject.transform.localScale.x > 0.1f))
                if (touch0.phase == TouchPhase.Ended || touch1.phase == TouchPhase.Ended)
                {
                    spawnedObject.transform.localScale += scaleChange;
                    //spawnedObject.transform.localScale = Vector3.one * scaleValue;
                    // https://docs.unity3d.com/ScriptReference/Transform-localScale.html
                }
            }
            else if (Input.touchCount == 1)
            {
                // Called when only 1 finger first touches screen and there isn't already an object spawned
                if (Input.GetTouch(0).phase == TouchPhase.Began && spawnedObject == null)
                {
                    // Initiate when touch (not sure)
                    if (Physics.Raycast(ray, out hit))
                    {
                        // Check if touching the previously spawned object
                        // This can probably be deleted since I made it that this function won't work if there's already an object
                        if (hit.collider.gameObject.tag == "Spawnable")
                        {
                            // If so, assign object interacting with the hit collider to spawnedObject variable
                            spawnedObject = hit.collider.gameObject;
                        }
                        else
                        {
                            // If is it not a previously spawned object, create instance of prefab
                            if (spawnedObject == null)
                            {
                                SpawnPrefab(m_Hits[0].pose.position);
                            }
                        }
                    }
                }
                // If phase is set to MOVED and spawnedObject variable has something in it
                else if (Input.GetTouch(0).phase == TouchPhase.Moved && spawnedObject != null)
                {
                    // Move spawned object to the touch location
                    spawnedObject.transform.position = m_Hits[0].pose.position;
                }

                // Check if phase ENDED
                if (Input.GetTouch(0).phase == TouchPhase.Ended)
                {
                    // This line was messing things up I think
                    //spawnedObject = null;
                }
            }
        }
    }

    // Method that takes in a location and creates an instance of the prefab at the location
    void SpawnPrefab(Vector3 spawnPosition)
    {
        spawnedObject = Instantiate(spawnablePrefab, spawnPosition, Quaternion.identity);
    }
}
